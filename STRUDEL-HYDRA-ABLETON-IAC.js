// ✧･ﾟ: *✧･ﾟ:*  A U T H O R  *:･ﾟ✧*:･ﾟ✧
// ███╗   ███╗██████╗  ██████╗ 
// ████╗ ████║██╔══██╗██╔═══██╗
// ██╔████╔██║██║  ██║██║   ██║
// ██║╚██╔╝██║██║  ██║██║   ██║
// ██║ ╚═╝ ██║██████╔╝╚█████████║
// ╚═╝     ╚═╝╚═════╝  ╚════════╝


//                                     ▓▓▓▓▓▓  ▓▓▓▓▓▓                                
//                                     ▓▓  ░░▓▓▓▓  ▓▓▓▓▓▓                            
//                               ▓▓▓▓▓▓▓▓░░  ░░▓▓░░░░▓▓▓▓  ▓▓                        
//                             ▒▒▓▓░░  ▓▓░░░░░░░░░░░░▓▓░░░░▓▓                        
//                                 ▒▒░░  ░░░░░░░░░░░░░░░░▓▓▓▓▒▒                      
//                                 ▓▓░░░░░░░░░░░░░░░░░░░░▓▓░░▓▓                      
//               ██████████    ▒▒▓▓░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░▓▓                      
//           ██████      ██████    ▓▓▓▓▓▓▓▓▓▓▓▓▒▒    ▒▒▒▒▒▒▓▓▓▓                      
//         ████              ████████▓▓▓▓▓▓▓▓▓▓▒▒    ▒▒  ▒▒▓▓                        
//       ████                  ██████░░  ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓                        
//                         ██████████░░  ░░░░░░██░░░░░░████                          
//                   ██████████    ██░░░░░░░░░░▒▒░░░░░░▒▒██                          
//             ██████████          ██░░░░░░░░░░░░░░░░░░░░██                          
//       ██████████                  ████░░░░░░░░░░░░░░░░██                          
//     ██████                          ████░░░░░░▒▒▒▒░░██                            
//   ████                              ██▓▓██░░░░░░░░██                              
// ████                          ████████▓▓▓▓████████                                
// ██                          ████▓▓▓▓▓▓████████▓▓██████                            
// ██                        ████▓▓▓▓▓▓▓▓▓▓██████▓▓██▓▓▓▓██                          
//                         ▓▓████▓▓▓▓██▓▓▓▓▓▓▓▓██▓▓██▓▓██▓▓▓▓                        
//                       ████████▓▓▓▓██▓▓▓▓▓▓▓▓██▓▓██▓▓██▓▓██                        
//                     ██▓▓▓▓▓▓▓▓████████████████▓▓██████▓▓██                        
//                     ██▓▓██▓▓▓▓████▒▒░░░░  ░░░░▓▓██▒▒██▓▓██                        
//                   ██▓▓▓▓██████████▒▒  ░░░░    ▓▓██▒▒██▓▓████                      
//                   ██▓▓▓▓▓▓████  ██▒▒░░    ░░░░▓▓██▒▒▒▒██████                      
//                 ██▓▓▓▓▓▓▓▓██    ██▒▒░░░░      ▓▓██▒▒▒▒██▓▓██                      
//                 ██▓▓▓▓▓▓▓▓██    ██▒▒░░░░░░░░░░░░▓▓██▒▒██▓▓██                      
//               ██▓▓▓▓████▓▓██    ████▒▒░░    ░░░░▓▓██▒▒██▓▓▓▓██                    
//               ██▓▓██░░░░██        ████████▓▓▓▓▓▓▓▓████████▓▓▓▓████                
//                 ██░░░░████        ████████████████████████▓▓████░░████            
//               ██░░░░░░░░██        ██▒▒░░░░░░░░░░░░░░░░████▓▓██░░░░░░░░██          
//               ██░░░░░░░░░░██      ██░░    ░░░░░░░░░░░░░░░░████░░░░░░░░██          
//               ██░░░░░░░░░░██      ██▒▒░░░░    ░░░░██░░░░░░████░░░░░░██            
//               ██░░░░░░░░██      ██▒▒  ▒▒▒▒▒▒░░░░░░██░░░░░░░░████████              
//                 ████████        ██████    ▒▒▒▒████░░████░░░░██                    
//                                 ██    ████▒▒██  ████▒▒▒▒▒▒▒▒░░██                  
//                               ██░░░░░░  ▒▒▒▒██    ██▒▒▒▒▒▒▒▒░░░░██                
//                               ██░░░░░░▒▒▒▒██        ██▒▒▒▒▒▒▒▒░░██                
//                             ██░░░░░░▒▒▒▒▒▒██        ██▒▒▒▒▒▒▒▒░░██                
//                           ██░░░░░░░░▒▒▒▒██            ██▒▒▒▒▒▒▒▒░░██              
//                           ██░░░░░░▒▒▒▒▒▒██            ██▒▒▒▒▒▒▒▒░░██              
//                         ██░░░░░░▒▒▒▒▒▒██              ██▒▒▒▒▒▒░░░░██              
//                       ██░░░░░░▒▒▒▒▒▒██                ██▒▒▒▒▒▒▒▒░░██              
//                       ██░░░░░░▒▒▒▒▒▒██                ██▒▒▒▒▒▒▒▒░░██              
//                         ██░░▒▒▒▒▒▒██                    ████████████              
//                       ████████████                        ████████                
//                       ██▓▓▓▓████                          ██▓▓▓▓██                
//                     ████████████                        ██▓▓██████████            
//                   ██▓▓▓▓▓▓▓▓██                          ██▓▓▓▓▓▓▓▓▓▓▓▓████        
//                 ██▓▓▓▓▓▓▓▓▓▓██                          ██████▓▓▓▓▓▓░░░░░░██      
//               ██▓▓░░░░░░░░████                                ██████████████      
//               ██████████████                                                      

// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ HYDRA UTILS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
const ROAD = [
  'aedHplWQULpK3EtL0e',
  'XFneevd57vAiQY2RfE',
  'doZt9SbUtkxBVs6hxU',
  'fjfEc0RXDieTclEfNA',
  'sP421PV6PQnxm',
  '8QGeM21YMppC8OK2Nu',
  'ldGlPx5DBnza8Jrg1V',
  'ebkfIyR4vM9ry',
  'GichxSNcJLONNaNnPc',
  'iqsUJEAj4EcmTfeL1l',
  '9xnvqP4h7004qY1TN0',
  'JxYOG4QI7kCpa',
  'l1J9PtAZGbojHfy0w',
  '7sE3k7bH5CK1a',
  '8vOF7lHxRwAMdpiqB5',
  'PmG9DpvoHYsrMx0Why',
  'l0HlLjYOwDrZ0gwi4',
  '3o7WTEGI9cByHp7Kyk',
  'SBlcOYNbrDKt9Hi4uP',
  'xT0xeLGW5RNbe5P8Qg',
  'FvVlikAm38N2rTocwv',
  'fY5S4UIBBqXxQJttrD',
  'QPdFfvfdH7E7b8n3KY',
  'UmV0wC1cmMMeY',
  'l1J3JNMG6s0EZFhOo',
  'zR26Cr95A7qyQ',
  '1RzxO23CBMSmP8uXEx',
  'cG3mlW8rT9euUYCC1n',
  'kAOce9WO0em6gP7XsP',
  'j4wB9nLvOmxveeg4FY',
  'Y1UUy7UjH9QPy9mD8l',
  '3ivt5b3JTZpNo4mdMJ',
  'DQdRig8fxMsNrkj0kl',
  'QC7Sr79vU5OGpy6Iu2',
  'Ter4hHYDFwNMNhtXoy',
  '8mtqopmmIWOgBgxzRv',
  'ToMjGpOBQGMDb9tDMeA',
  '5xtDarLIo2eSlHf2egE',
  'Zb5d5wGRLiBKk1kRgk',
  'l0DAH9W6r05zHHCda',
  'xWIypOKrzfkd6Bh3nO',
  'jMnYr30FBjyXm',
  'DO2jvfG9MoYyjpJULd',
  'l4FGlEnPefM1PjYti',
  '3oKIPwbWZ7wEA2ASvC',
  'QUM2t0QxFbq0JWoJ88',
  'xUOwGgWLnGSJtiM2nC',
  'l4FGHSKLdtWz4bo0o',
  'MnwftgiCSqa42XreYm',
  'xT9IgzelwEjyg8z9Li',
  'ViaqlyyNZGMyA',
  'h7RC77wmIO2KmLgZNE',
  '3ohs86LmNcEORhbq00',
  '3o6ZtqMuDtPTwKD1JK',
  '10Nf5MZtSr9Isw',
  '26tPpU5wAk6MK3kXu',
]

const ANIME = [
  'imKrSqrDxAuvS',
  'wVi0fB6VvEuylB896b',
  '5ZYA31R5OP6JdmVP3f',
  'jUJgL0iByjsAS2MQH1',
  'nSiNho356rXH2',
  'V5qXaUBISlbTa',
  'v2WuhMBzb3h5e',
  'vMSXa7KFGx49aeeXhe',
  'Ui46FI4nHWyD6',
  'BMu2SwuXflOlQP8jTC',
  'fUpvkRuLKE4xMBJLvH',
  'J1KaQ7nz8P0L3O15L7',
  'dSdSQmzlJopuqueF2i',
  '2SYqgPxMm2kbVe3y02',
  '2seKKLp1n0sEeJLYTK',
  '451shsqh5nJ9UqDElR',
  'k5zu35npVsYfgZQwwl',
  '4DNPcZOIcgnwA',
  'l0K4nA7cpMeUvf2Fi',
  '3o6EhMvVN4xywtj0w8',
  '3o7qE3hpYEbxrpvtLO',
  'u4OCfdmLJEkFi',
  'l0K4ii1UZNuiypB9C',
  'l0K423YWdCvHeemsg',
  '26vUGqm4LZHmh98LS',
  'l396JYFnbVdFGQVz2',
  '26vUBz1PjdxlOf7cQ',
  '3o7qDP1T6zeSFPInPq',
  'l3975JMDfpxb1Rgcg',
  '3o7qEaJ6NzOzld8vfO',
  '3o7qDNQuLZ1gOCedQ4',
  '3o7qE9vHyyP0sdSzyo',
  '3o7qDOp14xP17OoZby',
  'l0K4bmBeMK9znRTz2',
  'l396QaDFGgDytJK1y',
  'ExRFIyExpUKHK',
  'wGUpSQWxnYpji',
  'lgQ67zBpyNtkOIYQNj',
  '141IT7TDZlalFu',
  'RpAI6k1xGwZq0',
  'fsoCk5kgOcYMM',
  'FqdGGgugkC4Xm',
  'MXoEoAUeBXapi',
  'WmMMsTJCV2h0Y',
  'vfg92uVyrc3aU',
  '3osxYlSDn290VbV076',
  'jAe22Ec5iICCk',
  'bi6RQ5x3tqoSI',
  'wv1RNuvWMjQ10bzExO',
  '4ilFRqgbzbx4c',
  'cVPcABKys8dHy',
  'aZzXDWIjefE5y',
  '4MxLhxhOqCqYw',
  'lmdWrAZEBB5TO',
  'euVwF4P2b0sus',
  'QEhmoTK7GPTkA',
  'NzbcdfP2B6GKk',
  'l0K48n9FVuc0oo5So',
  'OiQAbeIgiJEzyrM4p9',
  'PZrjGkr334fXa',
  'ROUXN6hzDgyf6',
  '3o7qDXnOvzpiINqjcc',
  '3Z1kP6uFLMlyfuTA6A',
  '3o7qEa2qFRQ1oTPNtu',
  '32KRTcz8e7VAXBZjSB',
  '3o7qDQEzc4uJ2rwsbS',
  'OGikcvL7UAqemQxW88',
  '41C55ZzL8M00frDXEM',
  'SuZWJOT85PesdekaUf',
  'LSngi7IrKV4rZJYusZ',
  '8VJHQE2WDA9RyU3KM5',
  'LYrd48YmInWnYSjvUK',
  'fu4A9JuTVZV1m',
  'tXzFpjeqVnE7m',
  '3o7qE8ozvVB96om9gI',
  'FVWAuCawVHazvo4sFJ',
  'ATNaKsgb4OktNdJnnX',
  'udK21RQeWtaGQ',
  'J1KaQ7nz8P0L3O15L7',
  'vFtxhHXy6tckXPaoKd',
  'y8IjAb0W8e6yyTKlja',
  'l396YgwezVAGsNCNi',
  '26vUKL7zxr5RLafVS',
  'xT4uQBsGHPxvxIvl7i',
  'l0K4dsf12j6MbZrIA',
  '3o7qDDEkCIHbpjxuhy',
  '26vUwr71xcR4uimQ0',
  '3o7qE9UzPqInSrDFok',
  'l0K46Q4CZ7FZl7Q40',
  '3o7qDOVITVjuHjBSXS',
  'l0K4bmBeMK9znRTz2',
]

function urlFor(id) { return 'https://media.giphy.com/media/' + id + '/giphy.mp4' }

function getRandomInt(min, max) {
  min = Math.ceil(min);   // round up lower bound
  max = Math.floor(max);  // round down upper bound
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ STRUDEL UTILS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
if (typeof Pattern !== 'undefined') {
  try {
    delete Pattern.prototype.tomidi;
  } catch (_) {}
  
  Pattern.prototype.tomidi = function (chan, vel = FLAT_GAIN, len = 0.25) {
    return this.midichan(chan).midi({
      velocity: vel,
      length: len
    });
  };
}

if (typeof Pattern !== 'undefined') {
  try { delete Pattern.prototype.pgm; } catch (_) {}

  const _pcOnce = (chan, prog) => {
    // Accept 1–128 or 0–127, coerce & clamp
    let p = Number(prog);
    if (Number.isFinite(p)) {
      if (p >= 1 && p <= 128) p = p - 1;  // user-friendly 1-based to 0-based
      if (p < 0) p = 0;
      if (p > 127) p = 127;
    } else {
      console.warn('[pgm] Invalid program value:', prog);
      return null;
    }
    return progNum(p).midichan(Number(chan)).midi().take(1);
  };

  Pattern.prototype.pgm = function (a, b, c={}) {
    // Overloads:
    //   .pgm(chan, prog, {mode})
    //   .pgm({chan, prog, mode})
    let chan, prog, mode = (c && c.mode) || 'prepend';

    if (typeof a === 'object' && a) {
      chan = a.chan;
      prog = a.prog;
      if (a.mode) mode = a.mode;
    } else {
      chan = a;
      prog = b;
    }

    const pc = _pcOnce(chan, prog);
    if (!pc) return this; // invalid input → no-op, keep pattern as-is

    // Modes:
    if (mode === 'solo') {
      // Only the program change (no musical notes) → safest (won't cut sustains)
      return pc;
    }
    if (mode === 'append') {
      // Play notes, then schedule the PC (still can cut if running live)
      return stack(this, pc);
    }
    // default: 'prepend' → send PC first, then notes
    return stack(pc, this);
  };
}


// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ GLOBALS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸

const PORT = "IAC Driver Bus 1";
midiport(PORT);


const FLAT_GAIN = 1.0;

const R = "red";
const O = "orange";
const BR = "brown";
const Y = "yellow";
const C = "cyan";
const B = "blue";
const P = "pink";

const CH = {
  KICK: 1,
  HIHAT: 2,
  SNARE: 3,
  PERCSA: 4,
  PERCSB: 5,
  BASS: 6,
  LEAD: 7,
  PAD: 8,
  ARPS: 9,
  JUNO: 10,
  SH: 11,
  MINITAUR: 12,
  TB303: 13,
};

const OCT = {
  BASS: '3',
  LEAD: '3',
  PAD: '3',
  ARP: '4',
};

const KEY = 'c';
const MODE = ' minor';
// setcps(0.5) // 120
setcps(0.5) // 120

// 1 cycle = 4 beats
// BPM = beats per minute
// CPS = cycles per second = (BPM ÷ 60) ÷ 4

// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ PATTERNS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣯⠲⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣏⢧⠀⠛⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡗⡞⡆⠀⠈⠛⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢡⢻⡄⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⢥⢊⢷⡈⠔⠠⠐⢆⣩⢢⡀⢀⣿⣦⡀⠀⣤⠀⠀⠀⢀⣀⣤⢴⡶⡻⣍⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⢎⡱⢊⠗⣌⠣⡜⣨⠑⣎⠹⣲⠿⣯⠻⡾⣟⣧⣴⡞⣯⢻⡜⣧⢻⣵⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⣏⠲⣄⣀⠀⠀⠀⠀⠀⢸⡘⢆⡫⠜⣤⠳⣘⠤⣋⠴⠃⠇⠙⠄⠓⠑⠢⠒⠦⡙⢬⠫⡝⢾⣣⣯⣤⢤⣤⣴⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠸⣿⡻⢟⠧⣠⠘⠻⢄⡀⠀⠀⠀⡿⡘⢤⡛⣄⡇⠃⢀⠀⠀⡀⠀⠀⠄⡀⢀⠃⠘⠀⠣⡘⢇⠻⡄⢇⡛⠿⣼⣼⠃⣀⣀⠀⣀⡀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀
// ⠀⢈⣳⢩⠒⡭⢲⡀⠀⠈⠓⢤⣀⡷⣩⡶⡛⣥⠀⠀⠀⠀⢀⠀⠀⠁⢂⠐⠠⠀⠀⠌⠐⠈⡌⠓⡜⢣⢍⠳⣌⠯⡱⣄⠈⠉⠁⠉⠁⢈⠀⠁⢀⠀⢀⠀⣄⣤⠶⣻⠟⠁
// ⠀⠛⠲⢧⡹⣐⢣⠹⢦⡀⢦⡘⣼⡿⣋⠴⢛⡁⠀⠠⠁⢀⠠⠀⠌⠀⠀⠠⠁⠀⠂⢀⠁⠂⢌⠱⣈⠇⣎⠳⣌⠳⡱⡌⠖⡄⠂⠌⡐⠠⢀⣂⣤⠖⡞⣹⢣⡾⠋⠀⠀⠀
// ⠀⠀⠀⠈⢳⡱⣊⢕⢪⡙⢮⠳⣉⠖⣡⡾⠋⠀⢰⡀⠀⠠⠀⠀⠀⢀⠀⠁⠠⠐⠀⢂⠈⡐⡈⠔⣌⠚⣤⠛⣌⢳⠱⡸⢱⢈⡡⠤⢖⡻⢍⠳⣌⠳⣜⠗⠋⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠈⢳⡱⣊⢦⡙⣌⢣⠕⣪⠑⢦⡑⢲⡬⣇⠠⠐⠀⠁⢀⠀⡀⠌⠐⡀⢁⠂⢄⢠⡑⢎⡔⣫⢔⡫⣜⡡⢇⡳⡱⢪⢕⡋⢦⢣⡙⢖⣬⠟⠁⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⢻⡜⣶⣋⢦⠓⡎⢥⠛⡤⢭⠋⠀⢸⡄⠀⠌⡐⢀⠂⠄⡈⠄⡐⠠⢌⢢⠦⣙⢦⡹⢔⠮⡱⢦⠹⡜⢲⠍⣇⠞⣌⢣⢲⡽⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⣹⠳⡜⢦⠛⣜⢢⡛⢬⡏⡀⠀⠀⢿⣆⠰⣈⢦⣐⠠⣐⠢⣜⡱⢎⡣⢞⡡⢖⡍⣎⣳⡽⣌⠳⣉⢧⢚⣼⡚⣴⠟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⢠⢇⡻⢌⠧⡛⣼⡧⢜⡡⣇⠁⢀⠀⢾⣏⢧⡙⢦⣃⠯⣔⢫⡔⠣⣜⠱⣣⣙⡦⠟⠉⣷⡱⣌⢣⢣⢎⡣⢞⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⡼⢠⠙⣎⢳⡹⢴⠻⣎⠵⣙⠦⣅⡓⠀⠸⣶⡙⢦⢃⡞⢬⠲⣌⠓⣬⡷⠛⠉⠀⠠⢀⡷⡳⣌⠇⡞⣰⠹⣌⣯⢛⡳⣒⢖⡲⣒⠖⣦⠤⠤⢀⡀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⡏⠤⡙⡌⢧⡹⢾⠀⠈⠷⣎⡹⡜⣭⢛⠿⡽⡜⣣⢣⠞⣡⢳⡼⠛⠹⠃⠀⠀⠠⢡⡼⢳⡱⢪⡙⣖⣡⠓⣼⢧⢫⠴⣩⠎⡵⣸⢘⡴⢋⡽⠻⠤⣀⠀⠀
// ⠀⠀⠀⠀⠀⠀⣟⠰⢠⡙⢮⢵⣻⡄⠀⢠⠋⠳⢽⣰⢋⢮⡱⢎⡵⢪⡙⣖⢫⠗⣤⣀⣀⣀⣄⣶⠫⡝⣣⡕⣣⠝⡴⣊⡝⢦⣋⢎⢧⡑⢮⠱⢎⡱⢎⡵⢊⡟⠛⠉⠀⠀
// ⠀⠀⠀⠀⠀⠀⣏⠲⣁⢾⣩⣞⠶⣷⡀⡎⠀⠀⠀⠉⡛⠲⠽⣎⣜⢧⣙⢦⣋⠾⡰⢭⡹⣙⢞⡰⢫⣴⣟⡱⢣⢏⠶⡱⢎⡳⡜⣎⠶⣙⢦⢛⣬⡳⠗⠛⠳⠇⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⣯⢳⡰⢊⡷⣯⢿⣹⣟⣧⠀⠀⠀⢠⠃⠀⠀⠀⠈⠉⠙⠲⠛⠚⠽⠷⠓⡟⠚⠋⣩⡟⣴⢫⡝⣮⢳⣝⣻⡵⣹⣬⣳⠽⠚⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⣴⣿⡧⡽⣭⣻⣽⣯⢷⣻⣞⣷⣦⡀⡼⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⢰⠁⢀⣼⢧⣻⣜⣧⢿⣼⣳⢾⠟⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⣸⢿⣿⣷⡝⣾⣷⣿⣿⣿⣿⣽⣾⣟⣿⣷⣦⣤⣀⡀⠀⠀⢸⠀⠀⠀⠀⢀⣮⣶⣿⣽⣯⣷⢿⣞⣿⢾⣽⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⣿⡓⣞⡿⣿⣳⣿⡿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⡿⣟⣾⣯⣷⣿⣿⣯⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⣷⠙⣦⢻⣽⣿⢻⣽⣿⣿⡟⣿⣯⣿⣿⣾⣿⣿⢻⣽⣿⣿⣷⣿⣯⣿⣿⣽⣿⣿⢻⣽⣿⣽⣾⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠸⣷⣊⠶⣭⢻⣿⣿⣯⣷⣿⣿⣿⡿⣿⣿⢿⣻⣿⣿⣿⣿⣿⣻⣿⢿⡽⢏⡳⢬⢣⣓⢮⡻⢿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠙⢿⣾⣼⣿⣳⣿⣿⣯⡷⣿⡷⣿⣿⢿⣿⣿⣿⢿⣿⣻⣿⣿⢯⡛⣜⢣⡝⣎⢳⢬⠳⣝⢯⡿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠈⢻⣷⣿⣷⣿⣿⠛⢷⣻⡽⣯⢿⣿⡾⣿⡿⣟⣿⡿⣞⣯⢳⣌⢳⡜⡬⢓⢮⣹⡞⡿⣜⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠟⢿⡏⠙⠀⠀⠈⠙⠿⢿⣾⣟⣿⣽⣿⣻⣽⡻⣜⢯⣲⢯⡛⣴⢻⣋⠷⣩⢓⡎⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣿⢿⣿⠏⠉⠙⢯⢎⡳⢎⣵⣏⣶⣯⢒⠥⣋⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠿⠏⠀⠀⠀⠈⢧⡝⣾⣿⣿⣿⣿⣾⣿⡼⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣳⡿⣞⡿⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠛⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ KICK  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
const PTN_BD = 
  "1 [1 .8] 1 1 1 [1 .7 ~ ~] 1 1"
KICK:
  note("28")
    .struct(PTN_BD)
    .velocity(PTN_BD)
    .color(R)
    .punchcard()
    .sound("tr909_bd")
    .tomidi(CH.KICK)
    .slow(2)

/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ HIHAT  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
const PTN_HH = 
  // "0 1 [.1 .6 .6] 1 0 1 0 .6"
  "0 1 0 1 0 1 0 1"
_HIHAT:
  note("40")
    .struct(PTN_HH)
    .velocity(PTN_HH)
    .color(O)
    ._punchcard()
    .sound("tr909_hh")
    .tomidi(CH.HIHAT)

/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ SNARE  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
const PTN_SD = 
  // "0 0 0 <.6 0>"
  "0 0 0 .7"
_SNARE: 
  note("40")
    .struct(PTN_SD)
    .velocity(PTN_SD)
    .color(O)
    ._punchcard()
    .sound("tr909_sd")
    .tomidi(CH.SNARE)

/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ PERCASA  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
_PERCSA:
stack(
  note("50 49 48 <~ [~ 49]> ~ ~ ~ ~ ")
  // note("40 41 42 43 44 50")
)
    ._punchcard()
    .tomidi(CH.PERCSA)
    .color(BR)
    .slow(2)

_PERCSB:
stack(
  // note("[36 ~ 36] [~ 36] [36 36] [36 36] [36 ~ 36] [~ 36] [36 36] [36 ~]")
  // .velocity("[1 ~ 1] [~ .6] [1 1] [1 .6] [1 ~ .6] [~ 1] [1 .6] [1 ~]"),
  // note("36 36 36 36"),
  // note("{36 36 36 36}%8"),
  // note("[42 ~ 42] [~ 42] [42 42] [42 42] [42 ~ 42] [~ 42] [42 42] [42 ~]"),
  
  // note("~ 37 ~ 37"),
  // note("[41 ~ ~ 46] [~ 46] [~ ~ 41 45 ] 46").fast(2),
  // note("[42 42] [42 42] [42 42] [42 42]")
  // .velocity("[1 .5] [1 .5] [1 .5] [1 .5]").fast(4),
  
  // // note("~ 47 [47 ~ ~ ~ ~ ~ ~ 47] [~ ~ 47] [~ ~ ~ 47 ~ ~ ~ ~]").fast(2),
  // note("[42 42] [ 42 42] [42 42] [42 42]")
  note("[48 48 48] [48 48 48] [48 48 48] [48 48 48]").fast(2)
)
    ._punchcard()
    .tomidi(CH.PERCSB)
    .color(BR)
    .slow(2)



/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ BASS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
const PTN_BS = 
  // "{~ 0 ~ 0 ~ <0 5> ~ <3 0>}%8"
  // "{~ 0 ~ 0 ~ <0 5> ~ <3 0>}%16"
  // "{~ 0 ~ 0 <~ [0 0]>  ~ 0}%8"
  "{0 ~ 2  [4  5]}%2"
  //////

BASS: 
  n(PTN_BS)
    .scale(KEY + '2' + MODE)
    // .scale(KEY + OCT.BASS + MODE){ñ-}
    .color(Y)
    ._pianoroll()
    .sound("gm_electric_bass_finger")
    .tomidi(CH.BASS)
    // .pgm(CH.BASS, 50, { mode: 'solo' }) // init: 50


/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ LEAD  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
const PTN_LD = 
  // "{3 5 7 7 4 3 5 3}%16"
  // "{3 ~ ~ ~ ~ 3 ~ 3}%8"
  "{5 ~ 5 ~ [5 7] ~ ~ [9 7]}%8"
_LEAD:
  // note(`0 <0 <3 5>>`.add(`<0 0 0 0>`)
  //   .scale(KEY + '4' + MODE).slow(3))
  n(PTN_LD)
    .scale(KEY + '2' + MODE)
    .color(C)
    ._pianoroll({ fold: 1, cycles: 8 })
    .sound("gm_electric_bass_finger")
    .tomidi(CH.LEAD)
    // .pgm(CH.LEAD, 0, { mode: 'solo' }) // init: 0


/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ PAD  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
_PAD: 
  // note(`<[0,3,7] [3,5,7]>`.add(`<0 0 0 0 0>`)
  // note(`<[0,2,4] [2,5,7]>`.add(`<0 0>`)
  note(`<[0,4] [0,4]>`.add(`<0 1 3 4 5 6 7 8>`)
    .scale(KEY + '4' + MODE).slow(2)
    // .struct("1 1 0 1 1 0 1 0 1 1 0 1")
  )
    .color(B)
    ._pianoroll({ fold: 1 })
    .sound("gm_koto")
    .tomidi(CH.PAD)
    // .pgm(CH.PAD, 4, { mode: 'solo' }) // init: 4



/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ ARPS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////

_ARPS:
  // note(`[0]`.add(`<0 0 0 0 0>`)
  //   .scale(KEY + '3' + MODE).slow(3))
  n("{<0 1 3 5 7 5 3 5> <1 2 5 7 9 3 2 1>}%32")
    .scale(KEY + '3' + MODE) // OCT.ARP
    // .euclid(5,8)
    // .clip(2)
    .color(P)
    ._pianoroll({ cycles: 1 })
    // ._spiral({ steady: .96 })
    .sound("gm_kalimba")
    .tomidi(CH.ARPS, 1)
    // .pgm(CH.ARPS, 1, { mode: 'solo' }) // init: 1
    .slow(2)
    .sustain(4)
    .legato(1)

/////////////////////////////////////////////////////////////////////////////////////
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ SMPLS  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
/////////////////////////////////////////////////////////////////////////////////////
// samples('github:tidalcycles/dirt-samples')
// samples({ rave: 'rave/AREUREADY.wav', }, 'github:tidalcycles/dirt-samples')
// samples({ please: 'https://cdn.freesound.org/previews/235/235128_950925-lq.mp3' })
// samples({ nani: 'https://cdn.freesound.org/previews/234/234965_950925-lq.mp3' })
// samples({ hisashiburi: 'https://cdn.freesound.org/previews/323/323192_4347097-lq.mp3' })
// samples({ ne: 'https://cdn.freesound.org/previews/235/235019_950925-lq.mp3' })

// samples('shabda/speech:in_the_future,in_thepast,forever')
// samples('shabda/speech/ja-JP/m:私は,ただの,媒介,であり')
// samples('shabda/speech/ja-JP/彼が,私を,通して,語っている,のです')
// samples('shabda/speech/ja-JP/m:私は_ただの_媒介_です')
// samples('shabda/speech/ja-JP/彼が_私を_通して_語っている_のです')

// _BREAKBEATS: 
//   s("breaks165")
//     .fit().scrub("{0@3 0@2 4@3}%8".div(16))
//     // .fit().slice([0,.25,.5,.75], "0 1 1 <2 3>")
//     // .slice(8, "0 1 <2 2*2> 3 [4 0] 5 6 7".every(3, rev)).slow(0.75)
//     // .splice(8,  "0 1 [2 3 0]@2 3 0@2 7")
//     // .scrub("{0.1!2 .25@3 0.7!2 <0.8:1.5>}%8")
//     .gain(0.1) 

// _VOX:
//   s("rave")
//     .late(0.5)
//     .begin("<0>")
//     .gain(0.05) 

// _VOXJP:
//   // s("私は ただの 媒介 であり 彼が 私を 通して 語っている のです").slow(4).late(0.125)
//   // s("私は_ただの_媒介_です 彼が_私を_通して_語っている_のです")
//   s("彼が_私を_通して_語っている_のです")
//   // s("please nani hisashiburi ne")
//     // .begin("<0 .25 .5 .75>")
//     .striate(6).slow(3)
//     .room(1)
//     .delay(".5")
//     .pan("0 1")
//     .gain(0.1)  
  
// VOXEN:
//   // s("私は ただの 媒介 であり 彼が 私を 通して 語っている のです").slow(4).late(0.125)
//   s("in_the_future in_thepast forever")
//   .begin("<0 .25 .5 .75>")
//   .gain(0.2)  


// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ HYDRA  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡟⠀⠀⠀⠀⠀⠀⠀⠈⢻⡽⣄⠀⠀⠀⠙⣄⠀⠻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢯⣎⢧⡀⠀⠀⠘⢦⠀⢹⡄⠀⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⢀⣀⣠⣤⣶⠾⠷⠞⢿⡏⠻⣄⠀⠀⠈⢧⡀⢻⡄⠀⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣾⡾⠟⠛⠉⠁⠀⠀⠀⠀⠈⢳⡀⠈⢳⡀⠀⠀⠻⣄⢹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠸⠉⢹⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⡀⠀⠙⢦⡀⠀⠘⢦⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⡆⠀⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⠀⠈⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠱⣄⠀⠀⠙⢦⡀⠀⠉⢻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁
// ⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⠀⠀⠀⠀⣷⢣⣀⣀⠘⣧⠀⠀⠀⣶⠀⠀⠀⠀⢹⡄⠀⠀⠸⡆⠀⠀⠀⣀⣀⡤⠴⠶⠶⠶⠶⠘⠦⠤⣀⡀⠉⠳⢤⡀⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⡼
// ⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⡆⠀⠀⠀⠸⣾⠉⠉⠁⢿⡆⠀⠀⠘⢧⠀⠀⠀⠀⢳⡀⠀⠀⢳⡴⠚⠉⢀⣀⢀⣠⣶⣶⣿⣿⣿⣿⣧⣤⣀⣀⠀⠀⠈⠓⢧⡀⠀⠀⠀⠀⠀⠀⢰⡁
// ⠀⠀⠀⠀⠀⠀⠀⠀⠠⣧⢿⡆⠀⠀⠀⡜⣇⠀⠀⠘⣿⣄⡀⠀⠈⢣⡀⠀⠀⠀⢻⣆⠀⠈⢷⡀⣺⢿⣾⣿⡿⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠈⢷⠀⠀⠀⠀⠀⢀⠿⠃
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⢳⡀⠀⠀⢧⠈⢦⡀⠀⠘⣏⠛⣦⣀⣀⣙⠦⠤⢤⠤⠽⠗⠀⠀⢸⣭⣾⡿⠋⠀⣤⣤⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⢸⠀⠀⠀⠀⠀⢀⣀⠀
// ⠀⠀⠀⠀⠀⣦⠀⠀⠀⠘⡆⠀⢳⠲⣄⢘⣷⠬⣥⣄⡀⠈⠂⠀⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠘⠛⠙⠃⠀⠀⣼⣿⣿⣿⡿⠿⠁⠛⢛⣿⣿⣿⣿⡟⣿⢺⠀⠀⠀⠀⠀⢸⣿⡇
// ⠸⡄⢆⠀⠀⠈⣷⣄⠀⠀⠹⡆⢀⡴⠚⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠺⣿⣿⡿⠿⠀⠀⠀⠘⠿⢿⣿⣿⠇⠟⢨⠀⡄⠀⠀⠀⠀⢻⣷
// ⢰⣳⡸⣧⡀⠀⠘⣿⣶⣄⣀⡿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⡀⢀⠀⢀⠐⠞⢀⣼⠿⠃⠀⠀⢸⣼⠁⠀⠀⠀⠀⠈⠏
// ⠈⢇⠹⡟⠙⢦⡀⠘⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⠿⠤⠴⠾⠟⠛⠉⠁⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⠀⢸⠀
// ⢃⡘⣆⠘⣦⡀⠋⠀⠈⠛⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠏⠀⠀⠀⠀⠀⠀⠟⠁
// ⠀⣷⡘⣆⠈⢷⣄⡀⠀⠐⣽⡄⠀⠀⠀⢀⣠⣾⣿⣶⣶⣶⠶⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠏⠀⠀⠀⠀⠀⠀⡀⠀⠀
// ⠀⠉⢳⡘⢆⠈⢦⢁⡤⢄⡀⢷⡀⢀⢰⣿⡿⠟⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀
// ⠀⠀⢸⠛⣌⠇⠀⢻⠀⠀⠙⢎⢷⣀⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣇
// ⠀⠀⠀⠀⠈⢳⣄⡘⡆⠀⠀⠘⢧⡩⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠏⠈
// ⠀⠀⠀⠀⠀⠀⡟⢽⣧⠀⠀⠀⠈⢿⣮⣳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡏⠀⠀
// ⠀⠀⠀⠀⠀⣸⡇⠈⠹⣇⠀⠀⠀⠘⣿⡀⠈⠙⠒⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⠀⠀⠀
// ⠀⠀⠀⠀⠀⣿⠁⠀⠀⢿⡀⠀⠀⠀⠹⡷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣴⣶⣾⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⠃⠀⠀⠀
// ⢷⡇⠀⠀⢠⠇⠀⠀⡄⢀⣇⠀⠀⠀⠀⢷⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡤⠤⠖⣚⣯⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⡟⠀⠀⠀⠀
// ⠀⠙⣦⠀⡜⠀⠀⢸⠁⣸⣻⡄⠀⠀⠀⠸⣇⢹⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣤⣖⣞⣩⣥⣴⠶⠾⠟⠋⠄⠀⠀⠈⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣿⡿⠀⠀⠀⠀⠀
// ⠀⠀⠈⢳⡄⠀⢀⡟⢠⡇⠙⣇⠀⠀⠀⠀⢻⡀⠘⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⡏⢻⣇⢀⠀⠀⠀⠀⠀⣠⠞⡽⠁⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⠃⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠙⣆⡘⠀⡞⠀⠀⢿⡀⠀⠀⠀⠀⣧⠀⠀⣿⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠦⡟⢧⣀⣀⡠⠴⢊⡡⠞⠁⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀
// ⢄⠀⠀⠀⠀⠈⠳⣼⠄⠀⢀⣼⣧⠀⠀⠀⠀⢸⣆⢠⡧⣼⠉⠳⢤⣀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠃⠈⠙⠒⠶⠖⠊⣉⡀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠠
// ⠀⠳⡄⠀⠀⠀⠀⠙⢧⡀⢠⡿⢻⡀⠀⠀⠀⠀⢻⣤⠼⠿⠤⢤⣄⣈⡿⠲⠤⣄⣀⣤⡶⢾⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠂
// ⠀⠀⠙⣄⠀⠀⠀⠀⠈⢳⣼⠃⢠⡇⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⢉⡓⣶⣴⠞⠉⠀⢀⢻⣧⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠙⣧⠀⠀⠀⠀⠀⠹⣦⣶⢿⣦⠀⠀⠀⠀⠹⡄⠀⠀⠀⠀⣰⣿⡟⠁⠀⠀⢠⢿⣟⠛⠛⠛⠛⠒⠦⣤⣄⡀⠀⠀⢀⣠⣴⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠐⠋⣧⠀⠀⠀⠀⠀⠈⠧⣼⢹⠀⠀⠀⠀⠀⢱⡀⠀⠀⢰⣿⡟⠀⠀⠀⢀⢏⣿⡙⠲⢦⣄⣀⡀⠀⠀⠀⣿⠋⠉⠹⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⡐⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⢳⡀⠀⠀⠀⠀⠀⡨⣉⡀⠈⠀⠀⠀⠀⢷⡀⠀⣾⡿⠀⠀⠀⠀⡞⣾⣿⣿⣷⣶⣤⣤⣭⣽⣶⣿⡏⠀⠀⠀⠹⢿⣿⣿⣿⠿⠋⠀⠀⠀⠀⢀⡴⠋⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⢀⣀⡞⢻⠃⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢳⣰⡿⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠘⠛⢧⣄⡀⠀⠀⢀⣶⠞⠋⠀⠀⠀⠀⠀⠀⠀
// ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸ ✧ ✦ ✧ HYDRA  ✧ ✦ ✧ ¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸

// H(PTN_BD)
// H(PTN_HH)
// H(PTN_LD)
// H(PTN_BS)

await initHydra({ detectAudio: true, feedStrudel: 1 })
bpm = 120
a.setBins(4)      // 0=lows, 1=mids, 2=highs
a.setSmooth(.8)
a.show()


var LOWS  = () => a.fft[0] // osc(10, 0, () => LOWS*10)
var MIDS  = () => a.fft[2] 
var HIGHS = () => a.fft[3]

/*********************
 * MODE / PALETTE
 *********************/
const __KEY  = (typeof KEY  !== 'undefined') ? KEY  : 'c'
const __MODE = (typeof MODE !== 'undefined') ? MODE : ' minor'
const __isMinor = (__MODE || '').toLowerCase().includes('minor')

const __cold = { base:[0.18,0.44,0.85], accent:[0.60,0.85,1.00] } // blue-ish
const __warm = { base:[0.95,0.36,0.22], accent:[1.00,0.72,0.38] } // warm
const __pal  = __isMinor ? __cold : __warm

const mix = (a,b,t) => a + (b - a) * t
const BEAT  = "10 1 5 1";

/////////////////////////////////////////////////////////////////////////////////////
/////// SOURCE: STRUDEL (s0) - (Do not touch s0 init; Strudel owns it.)
/////////////////////////////////////////////////////////////////////////////////////
const SRC_STRUDEL = () => 
  src(s0)
  // .kaleid(
  //   ////////////// H(PTN_BD)
  // )
  // .diff(osc(1,0.5,5))
  // // .modulateScale(osc(2,-0.25,1))
  // // .saturate(2)
  // .rotate(0, 0.1)
  // .modulate(o0, () => mouse.x * 0.0003)
  // .scale(H(PTN_BD))
  // .modulate(voronoi(10,2,2))
  // .colorama( ()=>Math.sin(time/27)*.01222+9.89)
  // .mult(gradient().color(-1,-1,-1))
  // .modulateKaleid(osc(11,0.5,0),50)
  // .modulateRepeat(osc(10), 3.0, 3.0, 0.5, 0.5)
  // .modulateRotate(osc(1,0.5,0).kaleid(50).scale(0.5),15,0)
  // .mult(osc(50,-0.1,8).kaleid(9))
  // .modulateScale(osc(4,-0.5,0).kaleid(50).scale(0.5),15,0)
  // .modulate(osc(25,0.1,0.5)
  //             .kaleid(50)
  //             .scale(({time})=>Math.sin(time*1)*0.5+1)
  //             .modulate(noise(0.6,0.5)),
  //             0.5)


/////////////////////////////////////////////////////////////////////////////////////
/////// SOURCE: GIF/VIDEO (s1)
/////////////////////////////////////////////////////////////////////////////////////
var GIF_INDEX = 0
// s1.initVideo(urlFor(ROAD[getRandomInt(0, ROAD.length - 1)]))
s1.initVideo(urlFor(ANIME[getRandomInt(0, ROAD.length - 1)]))
const SRC_GIF = () => src(s1)
  // .scale(() => 1.0 + LOWS()*0.1)

  

/////////////////////////////////////////////////////////////////////////////////////
/////// SOURCE: WEBCAM (s2)
/////////////////////////////////////////////////////////////////////////////////////
s2.initCam({ audio:false })
const SRC_CAM = () => src(s2)
  .saturate(0)
  .contrast(1.1)
  // .color(-1, ()=>Math.random()*2)
  // // .kaleid()
  // .rotate(({time})=>(time%360)/8)
  // .modulate(noise(3.2, 0.08), 0.10) // freq, speed → amount
  // .modulateRotate(osc(4, 0.08, 0), ({time}) => Math.sin(time) * 0.5)
  // .modulate(o0, () => mouse.x * 0.0003)
  // .modulate(voronoi(H(PTN_BD),2,2))
  // .modulatePixelate(osc(7, 0.04, 0.2), 80)

// Echo controls (tweak live; stay as variables)
let ECHO_NEW   = 0.1;   // how much fresh cam to add each frame (0..1)
let ECHO_DECAY = 0.0005;  // fade of history each frame (higher = shorter trails)
let ECHO_SMEAR = 1.05;  // >1.0 stretches history outward slightly

// 1) fresh cam → o1
SRC_CAM().out(o1);

// 2) build echo in o2 (no o3 usage)
src(o2)
  .scale(() => ECHO_SMEAR)
  .brightness(() => -ECHO_DECAY)
  .blend(src(o1), () => ECHO_NEW)
  .out(o2);

const SRC_CAM_PLAIN = () => src(o1);
const SRC_CAM_ECHO  = () => src(o2);

/////////////////////////////////////////////////////////////////////////////////////
/////// SOURCE: AUDIO-REACTIVE (o3)
/////////////////////////////////////////////////////////////////////////////////////
// osc(1,1,1)
noise(H(BEAT),1,1)
  .modulate(noise(() => 2.0 + MIDS()*3.0, 0.05), () => 0.05 + MIDS()*0.12)
  .color(
    () => mix(__pal.base[0], __pal.accent[0], Math.min(1, MIDS()*0.9)),
    () => mix(__pal.base[1], __pal.accent[1], Math.min(1, MIDS()*0.9)),
    () => mix(__pal.base[2], __pal.accent[2], Math.min(1, HIGHS()*0.9))
  )
  .scale(5)
  .out(o3)

const SRC_REACTIVE = () => src(o3)

/////////////////////////////////////////////////////////////////////////////////////
/////// SOURCE: GSL FUNCTIONS
/////////////////////////////////////////////////////////////////////////////////////

setFunction({
    name: 'myModulator',
    type: 'combineCoord',
    inputs: [],
    glsl: 'return vec2(_st.x+(_c0.g-_c0.b*0.1),_st.y+(_c0.r*0.2));'
})

// noise(2)
// .myModulator(osc(20,.1,1).diff(o0))

/////////////////////////////////////////////////////////////////////////////////////
/////// MIXER
/////// COMPOSITE → o0
/////////////////////////////////////////////////////////////////////////////////////
solid(0,0,0)
  // .add(SRC_CAM_PLAIN(), () => .2)
  // .add(SRC_CAM_ECHO(),  () => 1)
  // .add(SRC_STRUDEL(), .3)
  .add(SRC_GIF(), 1)
  .add(SRC_REACTIVE(), .6)
  // GLOBAL FXs
  .saturate(1.3)
  .contrast(1.3)
  // .modulate(o0, () => mouse.x * 0.00003)
  .out(o0)

// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡾⠋⠉⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠃⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⣠⠖⠲⢤⡖⠒⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢀⡏⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⡏⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⢀⣀⠀⠀⢸⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠸⣄⠀⠁⣠⠞⠉⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣠⣤⣤⣤⣤⠀⠀
// ⠀⡞⠉⠻⠁⢹⠀⠀⡏⠀⠀⠀⠀⢸⠃⠀⠀⠀⠀⠀⠀⠀⠀⠹⣶⠋⠀⠀⠀⠀⣀⡤⠴⠒⠊⠉⠉⠀⠀⣿⣿⣿⠿⠋⠀⠀
// ⠀⠳⢤⡀⠀⡞⠁⠀⡇⠀⠀⢀⡠⠼⠴⠒⠒⠒⠒⠦⠤⠤⣄⣀⠀⢀⣠⠴⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⣼⠿⠋⠁⠀⠀⠀⠀
// ⠀⠀⠀⠈⠷⡏⠀⠀⣇⠔⠂⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⠿⠋⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠖⠋⠁⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⢰⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⠤⠒⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⢀⡟⠀⣠⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⢻⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⡤⠤⢴
// ⠀⠀⠀⠀⠀⠀⣸⠁⣾⣿⣀⣽⡆⠀⠀⠀⠀⠀⠀⠀⢠⣾⠉⢿⣦⠀⠀⠀⢸⡀⠀⠀⢀⣠⠤⠔⠒⠋⠉⠉⠀⠀⠀⠀⢀⡞
// ⠀⠀⠀⠀⠀⢀⡏⠀⠹⠿⠿⠟⠁⠀⠰⠦⠀⠀⠀⠀⠸⣿⣿⣿⡿⠀⠀⠀⢘⡧⠖⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡼⠀
// ⠀⠀⠀⠀⠀⣼⠦⣄⠀⠀⢠⣀⣀⣴⠟⠶⣄⡀⠀⠀⡀⠀⠉⠁⠀⠀⠀⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀
// ⠀⠀⠀⠀⢰⡇⠀⠈⡇⠀⠀⠸⡾⠁⠀⠀⠀⠉⠉⡏⠀⠀⠀⣠⠖⠉⠓⢤⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠃⠀⠀
// ⠀⠀⠀⠀⠀⢧⣀⡼⠃⠀⠀⠀⢧⠀⠀⠀⠀⠀⢸⠃⠀⠀⠀⣧⠀⠀⠀⣸⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠃⠀⠀⠀
// ⠀⠀⠀⠀⠀⠈⢧⡀⠀⠀⠀⠀⠘⣆⠀⠀⠀⢠⠏⠀⠀⠀⠀⠈⠳⠤⠖⠃⡟⠀⠀⠀⢾⠛⠛⠛⠛⠛⠛⠛⠛⠁⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠙⣆⠀⠀⠀⠀⠈⠦⣀⡴⠋⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⠙⢦⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⢠⡇⠙⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠋⠸⡇⠈⢳⡀⠀⢹⡀⠀⠀⠀⢀⡞⠁⠉⣇⣀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⡼⣀⠀⠀⠈⠙⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⣷⠴⠚⠁⠀⣀⣷⠀⠀⠀⢠⠇⠀⠀⠀⠀⠀⣳
// ⠀⠀⠀⠀⠀⠀⡴⠁⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣆⡴⠚⠉⠉⠀⠀⠀⠀⢸⠃⣀⣠⠤⠤⠖⠋
// ⣼⢷⡆⠀⣠⡴⠧⣄⣇⠀⠀⠀⠀⡴⠚⠙⠲⠞⠛⠙⡆⠀⠀⠀⠀⠀⢀⡇⣠⣽⢦⣄⢀⣴⣶⠀⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀
// ⡿⣼⣽⡞⠁⠀⠀⠀⢹⡀⠀⠀⠀⢹⠀⠀⠀⠀⠀⠀⣸⠀⠀⠀⠀⠀⣼⠉⠁⠀⠀⢠⢟⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⣷⠉⠁⢳⠀⠀⠀⠀⠈⣧⠀⠀⠀⠀⠙⢦⠀⠀⠀⡠⠁⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⠏⠀⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠹⡆⠀⠈⡇⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⠹⣧⠞⠁⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⢳⡀⠀⠙⠀⠀⠀⠀⠀⠘⣆⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⣰⠃⠀⠀⠀⠀⢀⡄⠀⢠⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⢳⡀⣰⣀⣀⣀⠀⠀⠀⠘⣦⣀⠀⠀⠀⡇⠀⠀⠀⢀⡴⠃⠀⠀⠀⠀⠀⢸⡇⢠⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠉⠉⠀⠀⠈⠉⠉⠉⠙⠻⠿⠾⠾⠻⠓⢦⠦⡶⡶⠿⠛⠛⠓⠒⠒⠚⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

// FULLSCREEN
// CTRL + CMD + F
// CMD + SHIFT + F
// STRUDEL PLAY / UPDATE
// CTRL + ENTER
// STRUDEL STOP
// CTRL + .

